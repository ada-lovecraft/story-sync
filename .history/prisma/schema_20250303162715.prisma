generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ChatLog {
  id             String          @id @default(cuid())
  filename       String
  size           Int
  content        String
  cleanedContent String?
  hash           String          @unique
  contentType    String          @default("text/plain")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastStepNumber Int             @default(1)
  CleanedChatLog CleanedChatLog?
  rounds         Round[]

  @@index([filename])
  @@index([hash])
}

model CleanedChatLog {
  id            Int      @id @default(autoincrement())
  content       String
  originalSize  Int
  cleanedSize   Int
  originalLines Int
  cleanedLines  Int
  createdAt     DateTime @default(now())
  chatLogId     String   @unique
  chatLog       ChatLog  @relation(fields: [chatLogId], references: [id], onDelete: Cascade)
  rounds        Round[]
}

model Round {
  id               String          @id @default(cuid())
  roundNumber      Int
  startLine        Int
  endLine          Int
  lineCount        Int
  characterCount   Int
  createdAt        DateTime        @default(now())
  chatLogId        String
  cleanedChatLogId Int?
  chapters         Chapter[]
  CleanedChatLog   CleanedChatLog? @relation(fields: [cleanedChatLogId], references: [id])
  chatLog          ChatLog         @relation(fields: [chatLogId], references: [id], onDelete: Cascade)

  @@unique([chatLogId, roundNumber])
  @@index([chatLogId])
}

model Chapter {
  id            String   @id @default(cuid())
  title         String
  content       String
  chapterNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roundId       String
  round         Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@index([roundId])
  @@index([chapterNumber])
}

model NarrativeSummary {
  id        String   @id @default(cuid())
  summary   String
  status    String   @default("queued")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roundId   String   @unique
}

model ContextDownConfig {
  id              String   @id @default(cuid())
  fromRoundId     String
  toRoundId       String
  targetChapterId String
  createdAt       DateTime @default(now())

  @@unique([fromRoundId, toRoundId, targetChapterId])
}

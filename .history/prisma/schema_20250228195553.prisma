// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Original document uploaded by user
model ChatLog {
    id             String   @id @default(cuid())
    filename       String
    size           Int
    content        String // Original file content
    cleanedContent String? // Cleaned content after processing
    hash           String   @unique // Unique hash of file content
    contentType    String   @default("text/plain") // MIME type of the file
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    lastStepNumber Int      @default(1) // Current workflow step (1: Upload, 2: Clean, 3: Parse, 4: Chapter)

    // Relationships
    rounds         Round[]
    CleanedChatLog CleanedChatLog?

    @@index([filename])
    @@index([hash])
}

// The cleaned version of the chat log after pattern replacements
model CleanedChatLog {
    id            Int      @id @default(autoincrement())
    content       String // Cleaned content after pattern replacement
    originalSize  Int // Size of original content in bytes
    cleanedSize   Int // Size of cleaned content in bytes
    originalLines Int // Number of lines in original content
    cleanedLines  Int // Number of lines in cleaned content
    createdAt     DateTime @default(now())

    // Relationships
    chatLogId String  @unique
    chatLog   ChatLog @relation(fields: [chatLogId], references: [id], onDelete: Cascade)
    rounds    Round[]
}

// Individual conversation round (user + dungeon_master pair)
model Round {
    id          String   @id @default(cuid())
    content     String // Content of this round
    roundNumber Int // Sequential number of the round
    createdAt   DateTime @default(now())

    // Relationships
    chatLogId        String
    chatLog          ChatLog         @relation(fields: [chatLogId], references: [id], onDelete: Cascade)
    chapters         Chapter[]
    CleanedChatLog   CleanedChatLog? @relation(fields: [cleanedChatLogId], references: [id])
    cleanedChatLogId Int?

    @@unique([chatLogId, roundNumber])
    @@index([chatLogId])
}

// Group of rounds organized into a logical unit
model Chapter {
    id            String   @id @default(cuid())
    title         String // Chapter title
    content       String // Chapter content
    chapterNumber Int // Sequential chapter number
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relationships
    roundId String
    round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

    @@index([roundId])
    @@index([chapterNumber])
}

// Narrative summary for a round
model NarrativeSummary {
    id        String   @id @default(cuid())
    summary   String // One-sentence narrative summary
    status    String   @default("queued") // Status: queued, completed, error
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    roundId String @unique
}

// Configuration for context carrying between chapters
model ContextDownConfig {
    id              String   @id @default(cuid())
    fromRoundId     String // ID of the first round to include in context
    toRoundId       String // ID of the last round to include in context
    targetChapterId String // Chapter that receives this context
    createdAt       DateTime @default(now())

    @@unique([fromRoundId, toRoundId, targetChapterId])
}
